name: 'Bicep Infrastructure'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'bicep/**'
  pull_request:
    branches:
      - main
    paths:
      - 'bicep/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Bicep action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - validate
          - what-if

env:
  AZURE_RESOURCE_GROUP: 'liveeventops-rg'
  AZURE_LOCATION: 'eastus'
  WORKING_DIRECTORY: './bicep'

jobs:
  bicep-validate:
    name: 'Bicep Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Bicep Build
      run: az bicep build --file main.bicep
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Bicep Lint
      run: az bicep lint --file main.bicep
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ env.AZURE_RESOURCE_GROUP }} \
          --location ${{ env.AZURE_LOCATION }} \
          --tags "project=LiveEventOps" "managed_by=github_actions"

    - name: Bicep Validate
      run: |
        az deployment group validate \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file main.bicep \
          --parameters sshPublicKey="${{ secrets.SSH_PUBLIC_KEY }}" \
                      webhookUrl="${{ secrets.WEBHOOK_URL }}" \
                      alertEmail="admin@liveeventops.com" \
                      environment="${{ github.ref_name == 'main' && 'prod' || 'dev' }}"
      working-directory: ${{ env.WORKING_DIRECTORY }}

  bicep-preview:
    name: 'Bicep What-If'
    runs-on: ubuntu-latest
    needs: bicep-validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'what-if')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Key Vault secrets
      id: keyvault
      run: |
        # Get Key Vault name from previous deployment (if exists)
        KV_NAME=$(az keyvault list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[?starts_with(name, 'liveeventops-kv')].name" -o tsv | head -1)
        
        if [ -n "$KV_NAME" ]; then
          echo "Found Key Vault: $KV_NAME"
          
          # Get secrets from Key Vault if they exist
          SSH_KEY=$(az keyvault secret show --vault-name "$KV_NAME" --name "ssh-public-key" --query "value" -o tsv 2>/dev/null || echo "")
          WEBHOOK_URL=$(az keyvault secret show --vault-name "$KV_NAME" --name "monitoring-webhook-url" --query "value" -o tsv 2>/dev/null || echo "")
          ALERT_EMAIL=$(az keyvault secret show --vault-name "$KV_NAME" --name "monitoring-alert-email" --query "value" -o tsv 2>/dev/null || echo "")
          
          # Use Key Vault values if available, otherwise fall back to GitHub secrets
          echo "ssh-key=${SSH_KEY:-${{ secrets.SSH_PUBLIC_KEY }}}" >> $GITHUB_OUTPUT
          echo "webhook-url=${WEBHOOK_URL:-${{ secrets.WEBHOOK_URL }}}" >> $GITHUB_OUTPUT
          echo "alert-email=${ALERT_EMAIL:-admin@liveeventops.com}" >> $GITHUB_OUTPUT
        else
          echo "No Key Vault found, using GitHub secrets"
          echo "ssh-key=${{ secrets.SSH_PUBLIC_KEY }}" >> $GITHUB_OUTPUT
          echo "webhook-url=${{ secrets.WEBHOOK_URL }}" >> $GITHUB_OUTPUT
          echo "alert-email=admin@liveeventops.com" >> $GITHUB_OUTPUT
        fi

    - name: Bicep What-If
      id: whatif
      run: |
        az deployment group what-if \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file main.bicep \
          --parameters sshPublicKey="${{ steps.keyvault.outputs.ssh-key }}" \
                      webhookUrl="${{ steps.keyvault.outputs.webhook-url }}" \
                      alertEmail="${{ steps.keyvault.outputs.alert-email }}" \
                      environment="${{ github.ref_name == 'main' && 'prod' || 'dev' }}" \
          --result-format FullResourcePayloads
      working-directory: ${{ env.WORKING_DIRECTORY }}
      continue-on-error: true

    - name: Comment What-If Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `
          #### Bicep What-If Analysis ðŸ“‹ \`${{ steps.whatif.outcome }}\`
          
          <details><summary>Show What-If Results</summary>
          
          \`\`\`
          ${{ steps.whatif.outputs.stdout }}
          \`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  bicep-deploy:
    name: 'Bicep Deploy'
    runs-on: ubuntu-latest
    needs: bicep-validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Key Vault secrets
      id: keyvault
      run: |
        # Get Key Vault name from previous deployment (if exists)
        KV_NAME=$(az keyvault list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[?starts_with(name, 'liveeventops-kv')].name" -o tsv | head -1)
        
        if [ -n "$KV_NAME" ]; then
          echo "Found Key Vault: $KV_NAME"
          
          # Get secrets from Key Vault if they exist
          SSH_KEY=$(az keyvault secret show --vault-name "$KV_NAME" --name "ssh-public-key" --query "value" -o tsv 2>/dev/null || echo "")
          WEBHOOK_URL=$(az keyvault secret show --vault-name "$KV_NAME" --name "monitoring-webhook-url" --query "value" -o tsv 2>/dev/null || echo "")
          ALERT_EMAIL=$(az keyvault secret show --vault-name "$KV_NAME" --name "monitoring-alert-email" --query "value" -o tsv 2>/dev/null || echo "")
          
          # Use Key Vault values if available, otherwise fall back to GitHub secrets
          echo "ssh-key=${SSH_KEY:-${{ secrets.SSH_PUBLIC_KEY }}}" >> $GITHUB_OUTPUT
          echo "webhook-url=${WEBHOOK_URL:-${{ secrets.WEBHOOK_URL }}}" >> $GITHUB_OUTPUT
          echo "alert-email=${ALERT_EMAIL:-admin@liveeventops.com}" >> $GITHUB_OUTPUT
        else
          echo "No Key Vault found, using GitHub secrets"
          echo "ssh-key=${{ secrets.SSH_PUBLIC_KEY }}" >> $GITHUB_OUTPUT
          echo "webhook-url=${{ secrets.WEBHOOK_URL }}" >> $GITHUB_OUTPUT
          echo "alert-email=admin@liveeventops.com" >> $GITHUB_OUTPUT
        fi

    - name: Deploy Bicep Template
      id: deploy
      run: |
        az deployment group create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --template-file main.bicep \
          --parameters sshPublicKey="${{ steps.keyvault.outputs.ssh-key }}" \
                      webhookUrl="${{ steps.keyvault.outputs.webhook-url }}" \
                      alertEmail="${{ steps.keyvault.outputs.alert-email }}" \
                      environment="prod" \
          --name "bicep-$(date +%Y%m%d-%H%M%S)"
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Get Deployment Outputs
      id: outputs
      run: |
        DEPLOYMENT_NAME=$(az deployment group list --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].name" -o tsv)
        az deployment group show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name "$DEPLOYMENT_NAME" \
          --query properties.outputs
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Save Infrastructure Outputs
      run: |
        echo '${{ steps.outputs.outputs.stdout }}' > bicep-infrastructure-outputs.json
        echo "Bicep infrastructure deployed successfully!"
        
        # Extract key information
        VM_IP=$(echo '${{ steps.outputs.outputs.stdout }}' | jq -r '.managementVmPublicIP.value // empty')
        VM_FQDN=$(echo '${{ steps.outputs.outputs.stdout }}' | jq -r '.managementVmFqdn.value // empty')
        KV_NAME=$(echo '${{ steps.outputs.outputs.stdout }}' | jq -r '.keyVaultName.value // empty')
        
        if [ -n "$VM_IP" ]; then
          echo "Management VM IP: $VM_IP"
        fi
        if [ -n "$VM_FQDN" ]; then
          echo "Management VM FQDN: $VM_FQDN"
        fi
        if [ -n "$KV_NAME" ]; then
          echo "Key Vault Name: $KV_NAME"
        fi

    - name: Upload Infrastructure Outputs
      uses: actions/upload-artifact@v3
      with:
        name: bicep-infrastructure-outputs
        path: bicep-infrastructure-outputs.json

    - name: Test Infrastructure
      run: |
        # Test VM connectivity (basic check)
        VM_IP=$(echo '${{ steps.outputs.outputs.stdout }}' | jq -r '.managementVmPublicIP.value // empty')
        if [ -n "$VM_IP" ]; then
          echo "Testing VM connectivity to $VM_IP..."
          timeout 30 bash -c "until nc -z $VM_IP 22; do sleep 1; done" && echo "VM is accessible" || echo "VM connectivity test failed"
        fi
        
        # Test Key Vault access
        KV_NAME=$(echo '${{ steps.outputs.outputs.stdout }}' | jq -r '.keyVaultName.value // empty')
        if [ -n "$KV_NAME" ]; then
          echo "Testing Key Vault access to $KV_NAME..."
          az keyvault secret list --vault-name "$KV_NAME" --max-results 1 > /dev/null && echo "Key Vault is accessible" || echo "Key Vault access test failed"
        fi
