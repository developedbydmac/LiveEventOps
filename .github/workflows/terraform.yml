name: 'Terraform Infrastructure'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.0'
  WORKING_DIRECTORY: './terraform'

jobs:
  terraform-check:
    name: 'Terraform Format and Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      working-directory: ${{ env.WORKING_DIRECTORY }}
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init -backend=false
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Terraform Validate
      id: validate
      run: terraform validate
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Comment Format Check Results
      if: github.event_name == 'pull_request' && steps.fmt.outcome == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '❌ **Terraform Format Check Failed**\n\nPlease run `terraform fmt -recursive` to fix formatting issues.'
          })

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Key Vault secrets
      id: keyvault
      run: |
        # Get Key Vault name from previous deployment (if exists)
        KV_NAME=$(az keyvault list --resource-group ${{ secrets.TF_STATE_RESOURCE_GROUP }} --query "[?starts_with(name, 'liveeventops-kv')].name" -o tsv | head -1)
        
        if [ -n "$KV_NAME" ]; then
          echo "Found Key Vault: $KV_NAME"
          
          # Get secrets from Key Vault if they exist
          SSH_KEY=$(az keyvault secret show --vault-name "$KV_NAME" --name "ssh-public-key" --query "value" -o tsv 2>/dev/null || echo "")
          WEBHOOK_URL=$(az keyvault secret show --vault-name "$KV_NAME" --name "monitoring-webhook-url" --query "value" -o tsv 2>/dev/null || echo "")
          ALERT_EMAIL=$(az keyvault secret show --vault-name "$KV_NAME" --name "monitoring-alert-email" --query "value" -o tsv 2>/dev/null || echo "")
          
          # Use Key Vault values if available, otherwise fall back to GitHub secrets
          echo "ssh-key=${SSH_KEY:-${{ secrets.SSH_PUBLIC_KEY }}}" >> $GITHUB_OUTPUT
          echo "webhook-url=${WEBHOOK_URL:-${{ secrets.WEBHOOK_URL }}}" >> $GITHUB_OUTPUT
          echo "alert-email=${ALERT_EMAIL:-admin@liveeventops.com}" >> $GITHUB_OUTPUT
        else
          echo "No Key Vault found, using GitHub secrets"
          echo "ssh-key=${{ secrets.SSH_PUBLIC_KEY }}" >> $GITHUB_OUTPUT
          echo "webhook-url=${{ secrets.WEBHOOK_URL }}" >> $GITHUB_OUTPUT
          echo "alert-email=admin@liveeventops.com" >> $GITHUB_OUTPUT
        fi

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=liveeventops.terraform.tfstate"
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan \
          -var="ssh_public_key=${{ steps.keyvault.outputs.ssh-key }}" \
          -var="webhook_url=${{ steps.keyvault.outputs.webhook-url }}" \
          -var="alert_email=${{ steps.keyvault.outputs.alert-email }}" \
          -var="environment=${{ github.ref_name == 'main' && 'prod' || 'dev' }}" \
          -out=tfplan \
          -detailed-exitcode
      working-directory: ${{ env.WORKING_DIRECTORY }}
      continue-on-error: true

    - name: Comment Plan Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `
          #### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Key Vault secrets
      id: keyvault
      run: |
        # Get Key Vault name from previous deployment (if exists)
        KV_NAME=$(az keyvault list --resource-group ${{ secrets.TF_STATE_RESOURCE_GROUP }} --query "[?starts_with(name, 'liveeventops-kv')].name" -o tsv | head -1)
        
        if [ -n "$KV_NAME" ]; then
          echo "Found Key Vault: $KV_NAME"
          
          # Get secrets from Key Vault if they exist
          SSH_KEY=$(az keyvault secret show --vault-name "$KV_NAME" --name "ssh-public-key" --query "value" -o tsv 2>/dev/null || echo "")
          WEBHOOK_URL=$(az keyvault secret show --vault-name "$KV_NAME" --name "monitoring-webhook-url" --query "value" -o tsv 2>/dev/null || echo "")
          ALERT_EMAIL=$(az keyvault secret show --vault-name "$KV_NAME" --name "monitoring-alert-email" --query "value" -o tsv 2>/dev/null || echo "")
          
          # Use Key Vault values if available, otherwise fall back to GitHub secrets
          echo "ssh-key=${SSH_KEY:-${{ secrets.SSH_PUBLIC_KEY }}}" >> $GITHUB_OUTPUT
          echo "webhook-url=${WEBHOOK_URL:-${{ secrets.WEBHOOK_URL }}}" >> $GITHUB_OUTPUT
          echo "alert-email=${ALERT_EMAIL:-admin@liveeventops.com}" >> $GITHUB_OUTPUT
        else
          echo "No Key Vault found, using GitHub secrets"
          echo "ssh-key=${{ secrets.SSH_PUBLIC_KEY }}" >> $GITHUB_OUTPUT
          echo "webhook-url=${{ secrets.WEBHOOK_URL }}" >> $GITHUB_OUTPUT
          echo "alert-email=admin@liveeventops.com" >> $GITHUB_OUTPUT
        fi

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=liveeventops.terraform.tfstate"
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="ssh_public_key=${{ steps.keyvault.outputs.ssh-key }}" \
          -var="webhook_url=${{ steps.keyvault.outputs.webhook-url }}" \
          -var="alert_email=${{ steps.keyvault.outputs.alert-email }}" \
          -var="environment=prod" \
          -out=tfplan
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Terraform Output
      id: output
      run: terraform output -json
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Save Infrastructure Outputs
      run: |
        echo '${{ steps.output.outputs.stdout }}' > infrastructure-outputs.json
        echo "Infrastructure deployed successfully!"
        echo "Management VM IP: $(echo '${{ steps.output.outputs.stdout }}' | jq -r '.management_vm_public_ip.value')"

    - name: Upload Infrastructure Outputs
      uses: actions/upload-artifact@v3
      with:
        name: infrastructure-outputs
        path: infrastructure-outputs.json

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Get Key Vault secrets
      id: keyvault
      run: |
        # Get Key Vault name from previous deployment (if exists)
        KV_NAME=$(az keyvault list --resource-group ${{ secrets.TF_STATE_RESOURCE_GROUP }} --query "[?starts_with(name, 'liveeventops-kv')].name" -o tsv | head -1)
        
        if [ -n "$KV_NAME" ]; then
          echo "Found Key Vault: $KV_NAME"
          
          # Get secrets from Key Vault if they exist
          SSH_KEY=$(az keyvault secret show --vault-name "$KV_NAME" --name "ssh-public-key" --query "value" -o tsv 2>/dev/null || echo "")
          WEBHOOK_URL=$(az keyvault secret show --vault-name "$KV_NAME" --name "monitoring-webhook-url" --query "value" -o tsv 2>/dev/null || echo "")
          ALERT_EMAIL=$(az keyvault secret show --vault-name "$KV_NAME" --name "monitoring-alert-email" --query "value" -o tsv 2>/dev/null || echo "")
          
          # Use Key Vault values if available, otherwise fall back to GitHub secrets
          echo "ssh-key=${SSH_KEY:-${{ secrets.SSH_PUBLIC_KEY }}}" >> $GITHUB_OUTPUT
          echo "webhook-url=${WEBHOOK_URL:-${{ secrets.WEBHOOK_URL }}}" >> $GITHUB_OUTPUT
          echo "alert-email=${ALERT_EMAIL:-admin@liveeventops.com}" >> $GITHUB_OUTPUT
        else
          echo "No Key Vault found, using GitHub secrets"
          echo "ssh-key=${{ secrets.SSH_PUBLIC_KEY }}" >> $GITHUB_OUTPUT
          echo "webhook-url=${{ secrets.WEBHOOK_URL }}" >> $GITHUB_OUTPUT
          echo "alert-email=admin@liveeventops.com" >> $GITHUB_OUTPUT
        fi

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=liveeventops.terraform.tfstate"
      working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Terraform Destroy
      run: |
        terraform destroy \
          -var="ssh_public_key=${{ steps.keyvault.outputs.ssh-key }}" \
          -var="webhook_url=${{ steps.keyvault.outputs.webhook-url }}" \
          -var="alert_email=${{ steps.keyvault.outputs.alert-email }}" \
          -var="environment=prod" \
          -auto-approve
      working-directory: ${{ env.WORKING_DIRECTORY }}
